reprex()
reprex(mean(rnorm(10)))
rmarkdown::render()
rmarkdown::render(y)
rmarkdown::render()
reprex(venue="so")
(y <- 1:4)
mean(y)
reprex(venue="so")
reprex(venue="so")
(y <- 1:4)
mean(y)
reprex(venue="so")
reprex(venue="so")
reprex(venue="so")
reprex(venue="so")
reprex(input = "mean(rnorm(10))\n")
reprex(mean(rnorm(10)))
reprex((y <- 1:4)
mean(y), venue="so")
reprex(venue="so")
?require
reprex(venue="so")
library(numpy)
require(numpy)
reprex(venue="so")
library(assertthat)
require(assertthat)
reprex(venue="so")
reprex(venue="so")
reprex(venue="so")
library(assertthat)
require(assertthat)
reprex(venue="so")
reprex(venue="so")
reprex(venue="so")
library(assertthat)
require(assertthat)
reprex(venue="so")
reprex(venue="so")
library(assertthat)
require(assertthat)
reprex(venue="so")
reprex(venue="so")
reprex(venue="so")
library(assertthat)
require(assertthat)
reprex(venue="so")
reprex(venue="so")
reprex(venue="so")
rmarkdown::render(require(assertthat))
r
?reprex
reprex({require(assertthat)},venue="so")
reprex({require(assertthat)},venue="so")
numbers <- 1:10
numbers
typeof("a")
typeof(1)
isthis_a_character <- function(stuff){
type_of_stuff <- typeof(stuff)
acharacter <- type_of_stuff == "character"
return(acharacter)
}
isthis_a_character(4)
?print
?numpy.sqrt
??numpy.sqrt
??numpy
reprex({require(assertthat), library(assertthat)}, venue= "so")
reprex({require(assertthat)
, library(assertthat)}, venue= "so")
reprex({require(assertthat)
, library(assertthat)}, venue= "so")
reprex({require(assertthat)}, venue= "so")
to_upper <- function(one_character){
stopifnot(isthis_a_character(one_character))
one_upper_character <- toupper(one_character)
return(one_upper_character)
}
to_upper("a")
to_upper(1)
stopifnot(is.character(numbers)) #base R
assert_that(is.character(numbers)) #assertthat
assert_that(is.flag(numbers))
is_odd <- function(number){
#assertion checking that `number` is indeed a numeric with length 1
assert_that(is.numeric(number), length(number) == 1)
oddity <- number %% 2 == 1
}
assert_that(is_odd(2))
on_failure(is_odd) <- function(call,env) {
print("call is: \n")
print(names(cal))
print(call)
print("env is: \n")
print(env)
return("This is not an odd number")
}
assert_that(is_odd(2))
assert_that(is_odd(2))
assert_that(is_odd(4))
on_failure(is_odd) <- function(call,env) {
print("call is: \n")
print(names(call))
print(call)
print("env is: \n")
print(env)
return("This is not an odd number")
assert_that(is_odd(2))
assert_that(is_odd(4))
assert_that(is.number("a"))
(assert_that(is.number("a")))
?range
?range
help(range)
q
print
help(range)
rnage
??range
print(x)
print(x)
?range
y <- data$population
x <- data$cityname
plot(x,y)
reprex(venue="so")
reprex(venue="so")
require(tidyverse)
is.loaded(tidyverse)
assert_that(package:tidyverse)
require("tidyverse")
assert_that(require("tidyverse"))
quadratic <- function(a,b,c) {
#Solves a quadratic equation of the form ax^2 + bx + c = 0
#given the coefficients a,b,c. Returns a tuple containing
#the two solutions (+ and -).
LHS = -b/(2*a) # part to the left of the +/-
RHS = sqrt(b^2 - 4*a*c)/(2*a) # part to the right of the +/-
return(c(LHS + RHS, LHS - RHS))
}
assert(quadratic(1,0,-1)==(1,-1)) # the solutions to x^2-1=0 are x=1 and x=-1
quadratic <- function(a,b,c) {
#Solves a quadratic equation of the form ax^2 + bx + c = 0
#given the coefficients a,b,c. Returns a tuple containing
#the two solutions (+ and -).
LHS = -b/(2*a) # part to the left of the +/-
RHS = sqrt(b^2 - 4*a*c)/(2*a) # part to the right of the +/-
return(c(LHS + RHS, LHS - RHS))
}
y <- c(1000000, 5000000, 14000000)
x <- c(Tokyo, Vancouver, Istanbul)
x <- c("Tokyo", "Vancouver", "Istanbul")
plot(x,y)
reprex()
reprex(venue="so")
reprex(venue="so")
assert_that(are_equal(quadratic(1,0,-1),
c(1,-1))) # the solutions to x^2-1=0 are x=1 and x=-1
reprex(venue="so")
reprex(venue="so")
reprex(venue="so")
reprex(venue="so")
library(reprex)
reprex(venue="so")
quadratic <- function(a,b,c) {
#Solves a quadratic equation of the form ax^2 + bx + c = 0
#given the coefficients a,b,c. Returns a tuple containing
#the two solutions (+ and -).
LHS = -b/(2*a) # part to the left of the +/-
RHS = sqrt(b^2 - 4*a*c)/(2*a) # part to the right of the +/-
return(c(LHS + RHS, LHS - RHS))
}
quadratic(0,4,5)
reprex(venue="so")
reprex(venue="so")
reprex(venue="so")
reprex(venue="so")
knitr::opts_chunk$set(echo = TRUE)
hist(all_means, las=1, prob=TRUE, main="Sample Means and The Population",
xlim=c(0,20), ylim=c(0,1), xlab="x")
set.seed(1234)
pop <- rgamma(1000000, shape = 1)
dens <- dgamma(pop, shape = 1)
mean(pop)
all_samples <- matrix(sample(x = pop, size = 50), nrow=10000, ncol=50)
all_means <- apply(all_samples, 1, mean)
hist(all_means, las=1, prob=TRUE, main = "Histogram of Sample Means")
hist(all_means, las=1, prob=TRUE, main="Sample Means and The Population",
xlim=c(0,20), ylim=c(0,1), xlab="x")
points(pop, dens, type="l", col="blue", lwd=2)
hist(all_means, las=1, prob=TRUE, main="Sample Means and The Population",
xlim=c(0,20), ylim=c(0,1), xlab="x")
points(pop, dens, type="l", col="blue", lwd=2)
abline(v=85, col="red", lwd=2.5, lty=2)
mtext("mean", side=1, at=85, cex=0.8, col="red")
legend(58,0.2, legend=c("All Means", "Population"),
col=c("black", "blue"), lty=1, cex=0.8, bty="n", lwd=3)
y <- 0:300
dens <- dpois(y, lambda=85)
plot(y, dens, type="l", xlim=c(50,120), las=1, xlab="Phone check/day",
ylab="Density", main="Dist. of Times Check Phone/day", col="blue")
abline(v=85, lty=3)
mtext("mean", side=3, at=85, cex=0.8, col="blue")
mtext(85, side=1, at=85, cex=0.8, col="blue")
sqrt(85) # the SD of the population
set.seed(14)
sample1 <- rpois(n=25, lambda=85)
sample1
mean(sample1)
sd(sample1)
hist(sample1)
set.seed(1234)
sample2 <- rpois(n=25, lambda=85)
sample2
mean(sample2)
sd(sample2)
hist(sample2)
set.seed(99)
sample3 <- rpois(n=25, lambda=85)
sample3
mean(sample3)
sd(sample3)
hist(sample3)
set.seed(141414)
RepSamples <- matrix( rpois(n=25*10000, lambda=85), nrow=10000, ncol=25 )
Means <- apply(RepSamples, 1, mean)
SDs <- apply(RepSamples, 1, sd)
Means[1:10]
mean(Means)
hist(Means, las=1, prob=T, main="Hist of 'Many Possible' Estimates")
hist(Means, las=1, prob=T, main="Many Estimates, and The Popln",
xlim=c(60,110), ylim=c(0,0.22), xlab="Phone check/day")
?rgamma
hist(Means, las=1, prob=T, main="Hist of 'Many Possible' Estimates")
hist(Means, las=1, prob=T, main="Many Estimates, and The Popln",
xlim=c(60,110), ylim=c(0,0.22), xlab="Phone check/day")
points(y, dens, type="l", col="blue", lwd=2)
dens <- dgamma(pop, shape = 1)
set.seed(1234)
pop <- rgamma(1000000, shape = 1)
dens <- dgamma(pop, shape = 1)
hist(all_means, las=1, prob=TRUE, main="all_means and pop",
xlim=c(0,10), ylim=c(0,1), xlab="x")
all_samples <- matrix(sample(x = pop, size = 50), nrow=10000, ncol=50)
all_means <- apply(all_samples, 1, mean)
hist(all_means, las=1, prob=TRUE, main = "Histogram of Sample Means")
hist(all_means, las=1, prob=TRUE, main="all_means and pop",
xlim=c(0,10), ylim=c(0,1), xlab="x")
points(dens, type="l", col="blue", lwd=2)
hist(all_means, las=1, prob=TRUE, main="all_means and pop",
xlim=c(0,10), ylim=c(0,1), xlab="x")
points(dens, type="l", col="blue", lwd=2)
hist(all_means, las=1, prob=TRUE, main="all_means and pop",
xlim=c(0,10), ylim=c(0,1), xlab="x")
points(dens, type="l", col="blue", lwd=2)
abline(v=85, col="red", lwd=2.5, lty=2)
hist(Means, las=1, prob=T, main="Many Estimates, and The Popln",
xlim=c(60,110), ylim=c(0,0.22), xlab="Phone check/day")
points(y, dens, type="l", col="blue", lwd=2)
hist(all_means, las=1, prob=TRUE, main="all_means and pop",
xlim=c(0,10), ylim=c(0,1), xlab="x")
points(
ggplot(as.data.frame(pop), aes(x = pop), binwidth = 2) +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.5) +
geom_density(colour = 'blue') + xlab(expression(bold('Simulated Samples'))) +
ylab(expression(bold('Density')))
)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
scale_x_log10() +
scale_colour_brewer()
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(aes(colour = year)) +
scale_x_log10() +
scale_colour_brewer()
librar(gapminder)
library(gapminder)
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(aes(colour = year)) +
scale_x_log10() +
scale_colour_brewer()
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(aes(colour = year)) +
scale_x_log10() +
scale_colour_distiller()
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(aes(colour = year)) +
scale_x_log10() +
scale_colour_distiller(palette = Dark2)
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(aes(colour = year)) +
scale_x_log10() +
scale_colour_distiller(palette = "Dark2")
gapminder %>%
ggplot(aes(x = country, y = lifeExp)) +
geom_line(aes(year))
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(country))
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_smooth(aes(country))
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(country))
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(color = country))
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(line = country))
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(line = country)) +
scale_linetype_discrete()
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(line = country), alpha = 0.2) +
scale_linetype_discrete()
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(line = country), alpha = 0.2) +
scale_linetype_discrete(colour)
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour == Rwanda = "red"), alpha = 0.2) +
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour == Rwanda == "red"), alpha = 0.2) +
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda"), alpha = 0.2) +
scale_linetype_discrete()
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda"), alpha = 0.2) +
scale_linetype_manual("Rwanda?", values = c("black", "red"))
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda"), alpha = 0.2) +
scale_colour_manual("Rwanda?", values = c("black", "red"))
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda")) +
scale_colour_manual("Rwanda?", values = c("black", "red"))
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda")) +
scale_colour_manual("", labels = c("other", "Rwanda"), values = c("black", "red"))
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda"), alpha = 0.5) +
scale_colour_manual("", labels = c("other", "Rwanda"), values = c("black", "red"), alpha = 1)
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda"), alpha = 0.5) +
scale_colour_manual("", labels = c("other", "Rwanda"), values = c("black", "red"))
library(RColorBrewer)
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda"),
alpha = country = "Rwanda") +
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda", alpha = country = "Rwanda"),
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda", alpha = country == "Rwanda"),
scale_colour_manual("",
labels = c("other", "Rwanda"),
values = c("black", "red"))
gapminder %>%
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda", alpha = country == "Rwanda"),
scale_colour_manual("",
labels = c("other", "Rwanda"),
values = c("black", "red"))
gapminder %>%
gapminder %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_line(aes(group = country, colour = country == "Rwanda", alpha = country == "Rwanda") +
scale_colour_manual("",
labels = c("other", "Rwanda"),
values = c("black", "red"))
gapminder %>%
scale_alpha_manual()
library(tidyverse)
mental <- read_csv("https://www.kaggle.com/osmi/mental-health-in-tech-survey/downloads/survey.csv")
head(mental)
mental
mental <- read_csv("https://docs.google.com/spreadsheets/d/1cr65P3ciL2tD4W4KOCTz4Ik67iD52S_DKHXypqgta2o/edit?usp=sharing")
mental
mental <- read_csv("http://databank.worldbank.org/data/download/Edstats_csv.zip")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
pwd
getwd()
mental <- read_csv("Desktop/survey.csv")
head(mental)
mental
mental %>%
group_by(Country) %>%
summarize(n = n())
mental %>%
group_by(Gender) %>%
summarize(n = n())
install.packages("ezknit")
install.packages("ezknitr")
install.packages("abundant")
library(abundant)
help(abundant)
setwd("~/Dropbox/UBC/Block3/DSCI_522_ozum/wine_classification/docs")
setwd("~/Dropbox/UBC/Block3/DSCI_522_ozum/wine_classification/src")
